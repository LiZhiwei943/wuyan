{"title":"java面向对象","uid":"282ca770e6df8001dbda062738b2a12a","slug":"java面向对象","date":"2020-08-15T10:49:36.000Z","updated":"2023-03-12T14:36:22.094Z","comments":true,"path":"api/articles/java面向对象.json","keywords":null,"cover":"https://cover.png","content":"<h1 id=\"类与面向对象基础（OOP）\"><a href=\"#类与面向对象基础（OOP）\" class=\"headerlink\" title=\"类与面向对象基础（OOP）\"></a>类与面向对象基础（OOP）</h1><h2 id=\"1-类的创建\"><a href=\"#1-类的创建\" class=\"headerlink\" title=\"1.类的创建\"></a>1.类的创建</h2><ol>\n<li><p>代码示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OOP</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Cat</span> cat1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tcat1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"猫\"</span><span class=\"token punctuation\">;</span>\n\t\tcat1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t\tcat1<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"绿色\"</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"信息:\"</span><span class=\"token operator\">+</span>cat1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span>cat1<span class=\"token punctuation\">.</span>age<span class=\"token operator\">+</span>cat1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>类是抽象的、概念的、代表一类事物，比如人类，汽车。。。。即它是数据类型</li>\n<li>对象是具体的，实际的，代表一个事物，即实例</li>\n<li>类是对象的模板，如汽车是类，奥迪牌汽车、宝马牌汽车、这些是属于汽车类的对象</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-对象在内存中存在的形式\"><a href=\"#2-对象在内存中存在的形式\" class=\"headerlink\" title=\"2.对象在内存中存在的形式\"></a>2.对象在内存中存在的形式</h2><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220819155014095.png\" alt=\"image-20220819155014095\"></p>\n<p>通过cat类创建的对象会在堆中创建一个地址，该地址中存放的是对象的属性值，如果值为基本数据类型则在堆中存放，如果值为引用数据类型即字符串，则会在方法区创建地址保存属性值。</p>\n<h2 id=\"3-类的访问修饰符与属性默认值\"><a href=\"#3-类的访问修饰符与属性默认值\" class=\"headerlink\" title=\"3.类的访问修饰符与属性默认值\"></a>3.类的访问修饰符与属性默认值</h2><ol>\n<li><p>属性的定义语法：访问 修饰符 数据类型 属性名；</p>\n<ol>\n<li>方法修饰符共有四种：public，private，proctected，默认</li>\n</ol>\n</li>\n<li><p>属性的定义类型包含多种类型可以是基本类型或引用类型</p>\n</li>\n<li><p>创建对象时，如果不给属性赋值，则属性会使用它的默认值，默认值与数组默认值相同</p>\n<ol>\n<li>byte，short，int，long是0，float，double是0.0，char是\\u0000，String是null,Boolean是false</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"4-对象的创建与访问\"><a href=\"#4-对象的创建与访问\" class=\"headerlink\" title=\"4.对象的创建与访问\"></a>4.对象的创建与访问</h2><p><strong>创建：</strong></p>\n<ol>\n<li><p>先声明再创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Cat</span> cat<span class=\"token punctuation\">;</span>\ncat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>直接声明并创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p><strong>访问：</strong>对象.属性</p>\n<h2 id=\"5-类与对象的地址分配与传递\"><a href=\"#5-类与对象的地址分配与传递\" class=\"headerlink\" title=\"5.类与对象的地址分配与传递\"></a>5.类与对象的地址分配与传递</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Peson</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">peson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"啊啊啊\"</span><span class=\"token punctuation\">;</span>\np1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Peson</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果将一个对象赋值给另一个对象，则二者所使用的内存空间相同，即p1随p2变化，p2随p1变化</p>\n<h2 id=\"6-类与对象Detail\"><a href=\"#6-类与对象Detail\" class=\"headerlink\" title=\"6.类与对象Detail\"></a>6.类与对象Detail</h2><ol>\n<li><p>类与对象的内存分配机制</p>\n<ol>\n<li>栈：一般存放基本数据类型（局部变量）</li>\n<li>堆：存放对象</li>\n<li>方法区：常量池（常量，如字符串），类加载信息</li>\n</ol>\n</li>\n<li><p>创建对象流程分析</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"来找我\"</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>加载Person类信息（属性与方法，只会加载一次）</li>\n<li>在堆中创建对象内存比分配空间，进行默认初始化</li>\n<li>把对象空间地址赋值给p，p就执行对象</li>\n<li>进行指定初始话，如：p.name = “来找我”; p.age = 18;</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><p>方法的特点：复用性，可封装性</p>\n<h2 id=\"方法的创建\"><a href=\"#方法的创建\" class=\"headerlink\" title=\"方法的创建\"></a>方法的创建</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Fun</span> ren <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"老好\"</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开始跑起来了</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fun</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//public 公开的</span>\n\t<span class=\"token comment\">//void 没有返回值</span>\n\t<span class=\"token comment\">// run() 方法名与行参</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始跑起来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"方法的参数（parameter）\"><a href=\"#方法的参数（parameter）\" class=\"headerlink\" title=\"方法的参数（parameter）\"></a>方法的参数（parameter）</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Fun</span> ren <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"老好\"</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开始跑起来了</span>\n        <span class=\"token comment\">//调用并传参</span>\n\t\tren<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t\n\t\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fun</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//public 公开的</span>\n\t<span class=\"token comment\">//void 没有返回值</span>\n\t<span class=\"token comment\">// run() 方法名与行参</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始跑起来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//计算0加到n的值</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tsum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>add(int n)：（int n） 为数据类型为int的形参</p>\n<p>ren.add(2000)： （2000） 传入的实参</p>\n<p><strong>注意：</strong>形参需要标注数据类型，实参需要与形参数据类型相同</p>\n<h2 id=\"方法的返回值\"><a href=\"#方法的返回值\" class=\"headerlink\" title=\"方法的返回值\"></a>方法的返回值</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Fun</span> ren <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"老好\"</span><span class=\"token punctuation\">;</span>\n\t\tren<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//开始跑起来了</span>\n\t\tren<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ren<span class=\"token punctuation\">.</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t\n\t\t\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fun</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//public 公开的</span>\n\t<span class=\"token comment\">//void 没有返回值</span>\n\t<span class=\"token comment\">// run() 方法名与行参</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始跑起来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//计算0加到n的值</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tsum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//计算两个数的和</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span>num1<span class=\"token operator\">+</span>num2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//计算两个数的和</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span>num1<span class=\"token operator\">+</span>num2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ren<span class=\"token punctuation\">.</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>public：方法表示方式为公开</p>\n<p>int：必定返回一个int类型的数据</p>\n<p>add1(int num1,int num2)：函数名与两个形参</p>\n<p>return sum：返回一个变量的值，变量名为sum</p>\n<p>ren.add1(10,20):因为方法带有返回值，所以这里可以认为ren.add1(10,20)等于sum等于30</p>\n<h2 id=\"方法的引用机制\"><a href=\"#方法的引用机制\" class=\"headerlink\" title=\"方法的引用机制\"></a>方法的引用机制</h2><p>当程序运行到主方法时或者在执行主方法中的方法调用程序时，都会在栈中创建一个对应的方法栈，之后方法中的<strong>程序全部执行完毕</strong>或者执行到<strong>return</strong>，销毁对应的方法栈。当主方法栈执行完毕后，将会退出整个程序。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220820140852966.png\" alt=\"image-20220820140852966\"></p>\n<h2 id=\"方法的使用（复用性）\"><a href=\"#方法的使用（复用性）\" class=\"headerlink\" title=\"方法的使用（复用性）\"></a>方法的使用（复用性）</h2><p>在日常的开发中，常常需要将某个程序执行多次，这里就需要用到方法。</p>\n<p>示例：要遍历三次数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Method</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">MyTools</span> tools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\"><span class=\"token namespace\">tools<span class=\"token punctuation\">.</span></span>Arrlist</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token namespace\">tools<span class=\"token punctuation\">.</span></span>Arrlist</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token namespace\">tools<span class=\"token punctuation\">.</span></span>Arrlist</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTools</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Arrlist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"方法的细节（Detail）\"><a href=\"#方法的细节（Detail）\" class=\"headerlink\" title=\"方法的细节（Detail）\"></a>方法的细节（Detail）</h2><ol>\n<li><p>```java<br>class Method<br>{</p>\n<pre><code>public static void main(String[] args) \n&#123;\n&#125;\n</code></pre>\n<p>}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n   访问修饰符（作用:控制方法的访问范围）\n\n   访问修饰符共四种：public、protected、private、默认（不写）\n\n2. &#96;&#96;&#96;java\n   class MyTools\n   &#123;\n   \tpublic void Arrlist(int[][] arr)&#123;\n   \t\tSystem.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n   \n   \t\tfor(int i &#x3D;0;i&lt;arr.length;i++)&#123;\n   \t\t\tfor(int j &#x3D;0;j&lt;arr[i].length;j++)&#123;\n   \t\t\t\tSystem.out.print(arr[i][j]+&quot;,&quot;);\n   \t\t\t&#125;\n   \t\t\t\tSystem.out.print(&quot;\\n&quot;);\n   \n   \t\t&#125;\n   \t&#125;\n   &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>一个方法最多有一个返回值</li>\n<li>返回的数据类型可以是任意类型，但需要在创建方法时定义</li>\n<li>如果方法要求有返回值，则方法中必须有 return 值；程序，返回的值可以是变量或者常量，但必须符合要求数据类型</li>\n<li>如果是void，则方法可以没有return语句，或只写return；（不能返回任何东西）</li>\n</ol>\n</li>\n<li><p>方法命名遵循驼峰命名法，要求见名知意</p>\n</li>\n<li><p>方法之中不能嵌套方法，但可以使用方法</p>\n</li>\n</ol>\n<h2 id=\"参数的细节\"><a href=\"#参数的细节\" class=\"headerlink\" title=\"参数的细节\"></a>参数的细节</h2><p>参考链接：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1fh411y7R8?p=208&amp;spm_id_from=pageDriver&amp;vd_source=f24cb303eb5accca215fadb0a6729822\">https://www.bilibili.com/video/BV1fh411y7R8?p=208&amp;spm_id_from=pageDriver&amp;vd_source=f24cb303eb5accca215fadb0a6729822</a></p>\n<ol>\n<li>一个方法可以有多个参数，也可以没有参数，如果有用 ，隔开</li>\n<li>参数类型可以是任意类型（基本，引用）</li>\n<li>调用带参方法时，一定要传入对应类型或兼容类型的参数，（兼容可以参考数据类型自动转换部分）</li>\n<li>方法中定义的参数为形式参数，简称形参，方法调用中传入的参数为实际参数，简称实参。<strong>注意：形参和实参所对应的数据类型，顺序，个数，必须一致</strong></li>\n</ol>\n<h2 id=\"方法的调用\"><a href=\"#方法的调用\" class=\"headerlink\" title=\"方法的调用\"></a>方法的调用</h2><ol>\n<li><p>方法之间的调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>方法之间的跨类调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">A</span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tm1<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>跨类调用与访问修饰符有关，如果修饰符为private基本是不行的</p>\n</li>\n<li><p>执行程序</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Method</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//跨函数调用</span>\n\t\t<span class=\"token class-name\">A</span> funA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfunA<span class=\"token punctuation\">.</span><span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//跨类调用</span>\n\t\t<span class=\"token class-name\">B</span> funB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfunB<span class=\"token punctuation\">.</span><span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">c1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">A</span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tm1<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"方法的递归（recursion）\"><a href=\"#方法的递归（recursion）\" class=\"headerlink\" title=\"方法的递归（recursion）\"></a>方法的递归（recursion）</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过函数自身的调用实现循环</p>\n<p>完整代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span>  <span class=\"token class-name\">Recursion01</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">T</span> tes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tes<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2,3,4</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=\"</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行机制效果图：<img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220821130303923.png\" alt=\"image-20220821130303923\"></p>\n<h2 id=\"方法的递归（Detail）\"><a href=\"#方法的递归（Detail）\" class=\"headerlink\" title=\"方法的递归（Detail）\"></a>方法的递归（Detail）</h2><ol>\n<li>每执行一个方法时，就会建立一个新的独立空间（栈）</li>\n<li>方法的局部变量是独立的，不会互相影响，如 n</li>\n<li>如果在递归方法中使用引用数据类型，此类型将会共享到其他调用的独立空间中</li>\n<li>递归必须向退出递归的条件逼近，不然会出现栈溢出的报错：StackOverflowError</li>\n<li>当一个方法执行完毕，或遇到return就会返回，一般情况下，谁调用方法，返回值就是谁的</li>\n</ol>\n<h2 id=\"方法的重加载（OverLoad）\"><a href=\"#方法的重加载（OverLoad）\" class=\"headerlink\" title=\"方法的重加载（OverLoad）\"></a>方法的重加载（OverLoad）</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OverLoad01</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Fun</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span>\n\t\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span>\n\t\tf<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//哈哈哈</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token string\">\", \"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fun</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> n1<span class=\"token operator\">*</span>n2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重加载，指同一个方法名的情况下，可以根据参数的不同设置不同的方法程序</p>\n<p>要求：1.方法名相同，</p>\n<p>​            2.参数数量，类型，顺序无要求，但要求存在与之相匹配的方法</p>\n<p>​            3.参数数量与类型、顺序都相同的方法只能出现一次，如m(int a)与m(int b)两个方法只能出现一次</p>\n<h2 id=\"方法的可变参数\"><a href=\"#方法的可变参数\" class=\"headerlink\" title=\"方法的可变参数\"></a>方法的可变参数</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span>  <span class=\"token class-name\">Auto</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">T</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果方法中存在可变参数，可同时传入任意个类型相同的数据</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//传入的可变参数以数组形式存在</span>\n\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\tsum<span class=\"token operator\">+=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Detail：</p>\n<p>​            1.每个人方法中只能存在一个可变参数</p>\n<p>​            2.调用形参有可变参数的方法时，可以传入0个或任意个(类型相同)实际参数</p>\n<p>​            3.方法的形参中可以同时传入普通参数与可变参数，但要注意可变参数必须放在形参列表的最后面，且传参时，要符合要求</p>\n<p>​            4.可变参数本质就是数组，所以在传参时，可以传入数组</p>\n<h2 id=\"方法的作用域\"><a href=\"#方法的作用域\" class=\"headerlink\" title=\"方法的作用域\"></a>方法的作用域</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//全局作用域</span>\n\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//属于全局变量</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以直接使用age变量</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//属于局部变量</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">num1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以直接使用age变量</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//方法中的age与Cat中的age互不影响</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"小儿\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//num1中的name与num中的name互不影响</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token comment\">//Error</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token comment\">//如果方法中存在age变量，则采取就近原则，输出20</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>全局作用域：类            局部作用域：类里面的每一个方法都是一个局部作用域</p>\n<p>全局变量：全局都可以访问的变量，如Cat类定义的属性就是全局变量(属性可以直接赋值，不赋值也可以，因为有默认值)</p>\n<p>局部变量: 只能内部方法与使用的变量，如num方法中的变量就属于局部变量，num1方法无法拿来使用(方法中的变量不能自定义不赋值，因为它没有默认值)</p>\n<p><strong>默认值的问题可以去看数据部分</strong></p>\n<p>Detail：</p>\n<ol>\n<li><p>属性和局部变量可以重名，输出或使用时采取就近原则</p>\n</li>\n<li><p>在同一作用域下，变量不能重名，在不同作用域下变量可以重名</p>\n</li>\n<li><p>局部作用域中的变量生命周期短，伴随这程序的执行而创建，当方法执行完毕后就会被销毁。全局作用域中的属性生命周期较长，伴随着类的创建而创建，当类销毁时，才会销毁灭</p>\n</li>\n<li><p>作用域范围不同：全局变量/属性:可以被本身的局部作用域使用，也可以通过创建对象的形式被外部作用域使用。局部变量/变量：只能中自己的方法中使用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">A</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">B</span> fun1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfun<span class=\"token punctuation\">.</span><span class=\"token function\">num1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfun1<span class=\"token punctuation\">.</span><span class=\"token function\">num2</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token comment\">//在A中的局部作用域调用B中的属性</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">num1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//方法二</span>\n\t\t<span class=\"token class-name\">B</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token comment\">//在B中的局部作用域调用A中的属性</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span><span class=\"token number\">19</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">num2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//方法一</span>\n\t\t<span class=\"token keyword\">double</span> time <span class=\"token operator\">=</span> <span class=\"token number\">11.00</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>全局作用域中的属性可以+修饰符，局部作用域中的变量不可以+修饰符</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token comment\">//在A中的局部作用域调用B中的属性</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span><span class=\"token string\">\"小李\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">num1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//方法二</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h1 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h1><ul>\n<li><p>基本介绍</p>\n<p>构造方法又叫构造器，是类的一种特殊的方法，它的主要作用是完成对<strong>新对象的初始化</strong>。它有以下几个特点：</p>\n<ul>\n<li>方法名和类名相同</li>\n<li>没有返回值，也没有void</li>\n<li>创建对象时，自动调用该类的<strong>构造器完成对象的初始化</strong>。</li>\n</ul>\n</li>\n<li><p>代码示例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Constructor</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造器1:\"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>age<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造器2:\"</span><span class=\"token operator\">+</span>p2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tname <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span>\n\t\tage <span class=\"token operator\">=</span> pAge<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//构造器的重构</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        name <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>构造器是完成对象的初始化，并不是创建对象</p>\n</li>\n<li><p>在创建对象时，系统自动调用该类的构造方法</p>\n</li>\n<li><p>如果程序没有定义构造器，则会默认生成一个隐式的构造器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorDetail</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Person</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220905181715858.png\" alt=\"image-20220905181715858\"></p>\n</li>\n<li><p>如果定义了构造器原先的隐式构造器将被覆盖，除非以显式的方式再声明一次</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorDetail</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Person</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> pAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tname <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span>\n\t\tage <span class=\"token operator\">=</span> pAge<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//显式声明</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对象创建流程（1-4版本）\"><a href=\"#对象创建流程（1-4版本）\" class=\"headerlink\" title=\"对象创建流程（1.4版本）\"></a>对象创建流程（1.4版本）</h2><ul>\n<li>流程分析<ul>\n<li>加载Person类信息(Person)，只会加载一次</li>\n<li>在堆中分配空间</li>\n<li>完成对象初始化，3.1默认初始化 name=null，age=0，3.2显式初始化 name=null，age=90，3.3构造器初始化 name=”小倩“,age=20</li>\n<li>将对象在堆中的地址返回给p（p是对象名，在栈中保存着对象的地址，可以当作是对象的引用）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h1><p>java虚拟机给每一个对象都分配了this，代表当前对象</p>\n<p>代码实例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">This01</span> \n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tomm\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",age=\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"this指向示意图\"><a href=\"#this指向示意图\" class=\"headerlink\" title=\"this指向示意图\"></a>this指向示意图</h2><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220905190440151.png\" alt=\"image-20220905190440151\"></p>\n<p><strong>this指向调用对象本身，哪个对象调用，this就指向哪个对象</strong></p>\n<p>Detail：</p>\n<ul>\n<li>this关键字可以用来访问本类的属性、方法、构造器</li>\n<li>this用于区分当前类的属性和局部变量</li>\n<li>访问成员方法的语法：this.方法名(参数列表)</li>\n<li>访问构造器语法：this(参数列表);<strong>注意只能在构造器中使用，即只能在构造器中访问另一个构造器，且必须放在第一条语句</strong></li>\n<li>this不能在类定义的外部使用，只能在类定义的方法中使用</li>\n</ul>\n<h1 id=\"IDEA\"><a href=\"#IDEA\" class=\"headerlink\" title=\"IDEA\"></a>IDEA</h1><h2 id=\"包的命名规则\"><a href=\"#包的命名规则\" class=\"headerlink\" title=\"包的命名规则\"></a>包的命名规则</h2><p>一般是小写字母+小圆点</p>\n<p>com.公司名+项目名+业务模块名</p>\n<p>比如: com.goods.sort.model</p>\n<h3 id=\"java中的常用包\"><a href=\"#java中的常用包\" class=\"headerlink\" title=\"java中的常用包\"></a>java中的常用包</h3><p>java.lang.*  不需要引入，可以直接使用的包</p>\n<p>java.util.*  util包，系统提供的工具包，如：Scanner</p>\n<p>java.net.* 网络包，网络开发</p>\n<p>java.awt.* 做java界面开发，GUI</p>\n<h3 id=\"包的作用\"><a href=\"#包的作用\" class=\"headerlink\" title=\"包的作用\"></a>包的作用</h3><p>防止出现重名类的情况</p>\n<img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220911153648372.png\" alt=\"image-20220911153648372\"  />\n\n<p><strong>Detaik：</strong></p>\n<p>​        一个类中最大存在一个package声明</p>\n<p>​        一个包中不能出现多个同名类</p>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h2><p>用于控制方法和属性的访问权限</p>\n<p>1.public 对外公开</p>\n<p>2.protected 对子类和同一个包中的类公开</p>\n<p>3.默认 没有修饰符对同一个包中的类公开</p>\n<p>4.private 私有级别，只对类本身公开</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220918182201641.png\" alt=\"image-20220918182201641\"></p>\n<p>注意：类也拥有访问修饰符，且只有public和默认修饰符对类有效</p>\n<p>​    </p>\n<h2 id=\"类的封装\"><a href=\"#类的封装\" class=\"headerlink\" title=\"类的封装\"></a>类的封装</h2><p>将类中的属性与方法封装起来，通过调用方法的形式访问类</p>\n<p>封装的好处：隐藏实现细节</p>\n<p>​                        可以对数据进行验证操作，保证安全合理</p>\n<h3 id=\"封装步骤\"><a href=\"#封装步骤\" class=\"headerlink\" title=\"封装步骤\"></a>封装步骤</h3><p>第一步，将类中所有属性设置为私有属性（private）</p>\n<p>第二步，设置set方法，修饰符为public，用于设置与操作属性</p>\n<p>第三步，设置get方法，修饰符为public，用于获取属性</p>\n<h3 id=\"代码实例：\"><a href=\"#代码实例：\" class=\"headerlink\" title=\"代码实例：\"></a>代码实例：</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Encapsulation01</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李志伟\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">13000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456780</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        person<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> job<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//        this.name = name;</span>\n<span class=\"token comment\">//        this.age = age;</span>\n<span class=\"token comment\">//        this.salary = salary;</span>\n<span class=\"token comment\">//        this.job = job;</span>\n        <span class=\"token comment\">//调用函数进行验证，防止功能失效</span>\n        <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setJob</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//方法</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名字长度不能大于四位，默认设置名称为jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token number\">12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对不起，您没有权限,无法查看年龄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">&lt;=</span><span class=\"token number\">120</span> <span class=\"token operator\">&amp;&amp;</span> age <span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄必须在1-120之间不能超出范围，默认设置年龄为18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置默认值</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> salary<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对不起，您没有权限，无法查看工资\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0.00</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSalary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> job<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名=\"</span><span class=\"token operator\">+</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 年龄=\"</span><span class=\"token operator\">+</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 工资=\"</span><span class=\"token operator\">+</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 工作=\"</span><span class=\"token operator\">+</span><span class=\"token function\">getJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名=\"</span><span class=\"token operator\">+</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 工作=\"</span><span class=\"token operator\">+</span><span class=\"token function\">getJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>提高代码的复用性</p>\n<p>提高代码扩展性</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220918211809493.png\" alt=\"image-20220918211809493\"></p>\n<p>子类会拥有父类的方法，父类又叫基类、超类，子类又叫派生类</p>\n<h3 id=\"Detail\"><a href=\"#Detail\" class=\"headerlink\" title=\"Detail\"></a>Detail</h3><p>1.私有的属性或方法不可以在子类中使用</p>\n<p>2.默认的属性或方法在同包下的子类中可以使用</p>\n<p>3.其他不可以被访问的属性和方法，可以通过父类提供的公共方法访问</p>\n<p>4.子类在使用本身的构造器之前都会先调用父类的构造器</p>\n<p>5.无论父类中的构造器有无参数，子类对象被调用时，都会先调用父类构造器再调用本身的构造器</p>\n<p>6.java所有的类都是Object类的子类，Object类所有Java类的基类</p>\n<p>7.父级构造器的调用不只是调用父级，而是会一直调用到Object类</p>\n<p>8.子类最多继承一个父类，子类如果想基础多个父类：a 被 b 继承  b再被 c继承，由此c就继承了a和b的方法与属性</p>\n<p>9.类的继承不能滥用必须复合逻辑，如：cat extends Animal  猫是动物的一种，所以猫可以直接使用动物类</p>\n<h3 id=\"继承过程\"><a href=\"#继承过程\" class=\"headerlink\" title=\"继承过程\"></a>继承过程</h3><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220919181035150.png\" alt=\"image-20220919181035150\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220919161458601.png\" alt=\"image-20220919161458601\"></p>\n<h2 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h2><p>获取父类构造器的方法</p>\n<p>子类构造器的第一行默认会存在应该super()方法获取父类的默认构造器</p>\n<p>子类构造器如果不想获取默认构造器，需要在super(实参)中传入对应构造器参数对应的实参，无论你有没有super，调用子类构造器都必须调用父类构造器</p>\n<p>super()方法必须且只能放在子类构造器第一行的位置</p>\n<p><strong>注意：</strong>this与super无法共存于一个构造器中</p>\n<h3 id=\"Detail-1\"><a href=\"#Detail-1\" class=\"headerlink\" title=\"Detail\"></a>Detail</h3><p>1.可以访问父类的属性，但不能访问父类的private属性</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220919192335221.png\" alt=\"image-20220919192335221\"></p>\n<p>2.可以访问父类的方法，但不能访问父类的private方法</p>\n<p>3.访问父类的构造器：super(参数) 只能放在子类构造器的第一句，如果子类没有定义构造器，会在默认构造器中定义一个super()</p>\n<p><strong>子类中通过super调用方法与不通过super调用方法的区别</strong></p>\n<p> 1.super.方法( ) 不会在本类中寻找方法，直接从父类中找，如果父类还有父类，则遵从就近原则</p>\n<p> 2.方法()或this.方法() 先在本类中找方法，找不到再去父类找</p>\n<h2 id=\"方法重写与覆盖\"><a href=\"#方法重写与覆盖\" class=\"headerlink\" title=\"方法重写与覆盖\"></a>方法重写与覆盖</h2><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20220919200257952.png\" alt=\"image-20220919200257952\"></p>\n<p><strong>注意事项：</strong></p>\n<p>​            1.子类方法的参数与名称要与父类方法的参数与名称完全一样</p>\n<p>​            2.子类方法的返回类型必须与父类方法返回的类型一样，或者是父类返回类型的子类，比如：父类返回类型为Object，子类返回String，String属于Object，所以可以</p>\n<p>​            3.子类方法的访问修饰符的访问范围可以大于父类，但不能小于父类方法的访问范围，public&gt;protec ted&gt;默认&gt;privacy</p>\n<h2 id=\"类的多态\"><a href=\"#类的多态\" class=\"headerlink\" title=\"类的多态\"></a>类的多态</h2><p>方法的多态：方法中的重载</p>\n<p>对象的多态：</p>\n<ol>\n<li>对象的编译类型和运行类型可以不一样</li>\n<li>编译类型在创建时就固定了，运行类型可以后面添加</li>\n<li>“ = ” 左边是编译类型，右边是运行类型 运行类型是编译类型的子类型</li>\n</ol>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20221024111146946.png\" alt=\"image-20221024111146946\"></p>\n<h3 id=\"向上转型\"><a href=\"#向上转型\" class=\"headerlink\" title=\"向上转型\"></a>向上转型</h3><ol>\n<li>在遵守访问权限的情况下，可以调用父类所有的方法</li>\n<li>不能调用父类中没有，但子类中有的特有方法</li>\n<li>编译时，能调用那些方法是编译类型决定的(父类中有的方法或与子类共有的方法才能被调用)</li>\n<li>运行时，看运行类型的具体实现(按照子类方法的内容来)</li>\n</ol>\n<h3 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h3><ol>\n<li>子类声明 子类名称 = （子类声明）父类名称</li>\n<li>能调用父类中没有，但子类中有的特有方法</li>\n<li>编译类型是子类，运行类型也是子类</li>\n<li>要求父类的引用必须指向子类(父类之前是子类的编译类型，子类之前是父类的运行类型)</li>\n<li><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20221024121254165.png\" alt=\"image-20221024121254165\"></li>\n</ol>\n<p><strong>注意：属性没有重写的说法，属性值看的是编译类型的值</strong></p>\n<p>instanceof 对所属关系进行判断，判断对象的运行类型是否为XX类型或者为XX类型的子类型</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20221024121531697.png\" alt=\"image-20221024121531697\"></p>\n<h3 id=\"动态绑定机制\"><a href=\"#动态绑定机制\" class=\"headerlink\" title=\"动态绑定机制\"></a>动态绑定机制</h3><p>方法有动态绑定，属性没有</p>\n<p>当调用对象方法时，该方法会和该对象内存地址/运行类型进行绑定(<strong>调用父类中无论什么方法都会先找子类[运行类型]，子类[运行类型]没有再用父类的</strong>)</p>\n<p>调用对象属性时，没有动态绑定，会直接用当前对象中的属性，找不到才去用子类或父类的</p>\n<h3 id=\"多态数组\"><a href=\"#多态数组\" class=\"headerlink\" title=\"多态数组\"></a>多态数组</h3><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2473/image-20221025152524461.png\" alt=\"image-20221025152524461\"></p>\n<p>将多个子类对象以运行类型的形式存到父类编译(对象)数组中</p>\n<h3 id=\"多态参数\"><a href=\"#多态参数\" class=\"headerlink\" title=\"多态参数\"></a>多态参数</h3><p>运行类型得参数为，起本类构造器参数+父类构造器参数</p>\n","feature":true,"text":"类与面向对象基础（OOP）1.类的创建 代码示例 class OOP &#123; public static void main(String[] args) &#123; Cat cat1 = new Cat(); cat1.name = \"猫\"; cat1.age = 18...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Cate","slug":"Cate","count":4,"path":"api/categories/Cate.json"}],"tags":[{"name":"Tag","slug":"Tag","count":4,"path":"api/tags/Tag.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88OOP%EF%BC%89\"><span class=\"toc-text\">类与面向对象基础（OOP）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%B1%BB%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.类的创建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E5%AD%98%E5%9C%A8%E7%9A%84%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">2.对象在内存中存在的形式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%B8%8E%E5%B1%9E%E6%80%A7%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">3.类的访问修饰符与属性默认值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">4.对象的创建与访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9C%B0%E5%9D%80%E5%88%86%E9%85%8D%E4%B8%8E%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">5.类与对象的地址分配与传递</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1Detail\"><span class=\"toc-text\">6.类与对象Detail</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">方法的创建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%88parameter%EF%BC%89\"><span class=\"toc-text\">方法的参数（parameter）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">方法的返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%BC%95%E7%94%A8%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">方法的引用机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E5%A4%8D%E7%94%A8%E6%80%A7%EF%BC%89\"><span class=\"toc-text\">方法的使用（复用性）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E7%BB%86%E8%8A%82%EF%BC%88Detail%EF%BC%89\"><span class=\"toc-text\">方法的细节（Detail）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">参数的细节</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">方法的调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E9%80%92%E5%BD%92%EF%BC%88recursion%EF%BC%89\"><span class=\"toc-text\">方法的递归（recursion）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E9%80%92%E5%BD%92%EF%BC%88Detail%EF%BC%89\"><span class=\"toc-text\">方法的递归（Detail）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%8A%A0%E8%BD%BD%EF%BC%88OverLoad%EF%BC%89\"><span class=\"toc-text\">方法的重加载（OverLoad）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">方法的可变参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">方法的作用域</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">构造器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%881-4%E7%89%88%E6%9C%AC%EF%BC%89\"><span class=\"toc-text\">对象创建流程（1.4版本）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#this%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">this关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this%E6%8C%87%E5%90%91%E7%A4%BA%E6%84%8F%E5%9B%BE\"><span class=\"toc-text\">this指向示意图</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IDEA\"><span class=\"toc-text\">IDEA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">包的命名规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#java%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8C%85\"><span class=\"toc-text\">java中的常用包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">包的作用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">访问修饰符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">类的封装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">封装步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">代码实例：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">类的继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Detail\"><span class=\"toc-text\">Detail</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">继承过程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#super\"><span class=\"toc-text\">super</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Detail-1\"><span class=\"toc-text\">Detail</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E4%B8%8E%E8%A6%86%E7%9B%96\"><span class=\"toc-text\">方法重写与覆盖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">类的多态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B\"><span class=\"toc-text\">向上转型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B\"><span class=\"toc-text\">向下转型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">动态绑定机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">多态数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">多态参数</span></a></li></ol></li></ol></li></ol>","author":{"name":"无言","slug":"无言","avatar":"https://avatar.png","link":"https://tridiamond.tech","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/tridiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Article Title","uid":"a6b82868af4785482b869dc5d958966b","slug":"hello-world","date":"2020-08-15T10:49:36.000Z","updated":"2023-03-12T14:34:40.360Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://cover.png","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[{"name":"Cate","slug":"Cate","count":4,"path":"api/categories/Cate.json"}],"tags":[{"name":"Tag","slug":"Tag","count":4,"path":"api/tags/Tag.json"}],"author":{"name":"TriDiamond","slug":"tridiamond","avatar":"https://avatar.png","link":"https://tridiamond.tech","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/tridiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}